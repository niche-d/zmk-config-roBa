#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q           &kp L         &kp U         &kp COMMA                    &kp DOT                                                      &kp F        &kp W  &lt 5 R  &kp Y  &kp P
&kp E           &kp I         &kp A         &kp O                        &kp SQT      &kp PSCRN                        &kp MINUS      &kp K        &kp T  &kp N    &kp S  &kp H
&kp LEFT_SHIFT  &kp Z         &kp X         &kp C                        &kp V        &kp SLASH                        &kp SEMICOLON  &kp G        &kp D  &kp M    &kp J  &kp B
&kp LCTRL       &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 6 LANGUAGE_1  &lt 2 SPACE  &lt_to_layer_0 3 LANGUAGE_2      &kp BACKSPACE  &lt 1 ENTER                         &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp LC(Q)  &kp LC(L)  &kp LC(U)  &kp LC(COMMA)  &kp LC(DOT)                              &kp F1   &kp F2  &kp F3           &kp F4         &kp F5
&kp LC(E)  &kp LC(I)  &kp LC(A)  &kp LC(O)      &kp LC(SQT)  &trans             &kp F11  &kp F6   &kp F7  &kp F8           &kp F9         &kp F10
&trans     &kp LC(Z)  &kp LC(X)  &kp LC(C)      &kp LC(V)    &kp LC(SLASH)      &kp F12  &kp F13  &trans  &kp RIGHT_SHIFT  &kp RIGHT_ALT  &trans
&trans     &trans     &trans     &trans         &trans       &trans             &trans   &trans                                           &trans
            >;
        };

        NUM {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN       &kp HASH           &kp DOLLAR            &kp PERCENT                                             &kp SLASH     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NON_US_BACKSLASH
&kp CARET        &kp AMPERSAND     &kp TILDE          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LESS_THAN         &kp MINUS  &kp ASTERISK  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp DOUBLE_QUOTES
&trans           &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp GREATER_THAN      &kp PLUS   &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD
&trans           &trans            &trans             &kp SPACE             &trans                 &trans                &trans     &trans                                                  &kp EQUAL
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE  &kp LC(LS(TAB))  &kp UP_ARROW      &kp LC(TAB)      &kp PG_UP                                 &kp LC(F)  &kp LC(W)  &kp LC(R)  &kp LC(Y)  &kp LC(P)
&kp HOME    &kp LEFT_ARROW   &kp DOWN_ARROW    &kp RIGHT_ARROW  &kp END    &trans      &kp LC(MINUS)      &kp LC(K)  &kp LC(T)  &kp LC(N)  &kp LC(S)  &kp LC(H)
&trans      &kp LG(LEFT)     &kp LS(LG(LEFT))  &kp LG(RIGHT)    &kp PG_DN  &trans      &kp LC(SEMICOLON)  &kp LC(G)  &kp LC(D)  &kp LC(M)  &kp LC(J)  &kp LC(B)
&trans      &trans           &trans            &trans           &trans     &trans      &kp LEFT_ALT       &kp LCTRL                                   &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
